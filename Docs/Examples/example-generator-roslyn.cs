//-------------------------------------------------------
// Roslyn generator - 163 lines
// Created with Roslyn Quoter
// https://roslynquoter.azurewebsites.net/
//-------------------------------------------------------

CompilationUnit()
.WithMembers(
    SingletonList<MemberDeclarationSyntax>(
        ClassDeclaration("MyController")
        .WithAttributeLists(
            SingletonList<AttributeListSyntax>(
                AttributeList(
                    SingletonSeparatedList<AttributeSyntax>(
                        Attribute(
                            IdentifierName("Route"))
                        .WithArgumentList(
                            AttributeArgumentList(
                                SingletonSeparatedList<AttributeArgumentSyntax>(
                                    AttributeArgument(
                                        LiteralExpression(
                                            SyntaxKind.StringLiteralExpression,
                                            Literal("api/[controller]"))))))))))
        .WithModifiers(
            TokenList(
                Token(SyntaxKind.PublicKeyword)))
        .WithBaseList(
            BaseList(
                SingletonSeparatedList<BaseTypeSyntax>(
                    SimpleBaseType(
                        IdentifierName("Controller")))))
        .WithMembers(
            List<MemberDeclarationSyntax>(
                new MemberDeclarationSyntax[]{
                    FieldDeclaration(
                        VariableDeclaration(
                            IdentifierName("IService"))
                        .WithVariables(
                            SingletonSeparatedList<VariableDeclaratorSyntax>(
                                VariableDeclarator(
                                    Identifier("_service"))))),
                    FieldDeclaration(
                        VariableDeclaration(
                            IdentifierName("ILogger"))
                        .WithVariables(
                            SingletonSeparatedList<VariableDeclaratorSyntax>(
                                VariableDeclarator(
                                    Identifier("_logger"))))),
                    ConstructorDeclaration(
                        Identifier("MyController"))
                    .WithModifiers(
                        TokenList(
                            Token(SyntaxKind.PublicKeyword)))
                    .WithParameterList(
                        ParameterList(
                            SeparatedList<ParameterSyntax>(
                                new SyntaxNodeOrToken[]{
                                    Parameter(
                                        Identifier("service"))
                                    .WithType(
                                        IdentifierName("IService")),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter(
                                        Identifier("logger"))
                                    .WithType(
                                        IdentifierName("ILogger"))})))
                    .WithBody(
                        Block(
                            ExpressionStatement(
                                AssignmentExpression(
                                    SyntaxKind.SimpleAssignmentExpression,
                                    IdentifierName("_service"),
                                    IdentifierName("service"))),
                            ExpressionStatement(
                                AssignmentExpression(
                                    SyntaxKind.SimpleAssignmentExpression,
                                    IdentifierName("_logger"),
                                    IdentifierName("logger"))))),
                    MethodDeclaration(
                        IdentifierName("IActionResult"),
                        Identifier("DoSomething"))
                    .WithAttributeLists(
                        SingletonList<AttributeListSyntax>(
                            AttributeList(
                                SingletonSeparatedList<AttributeSyntax>(
                                    Attribute(
                                        IdentifierName("HttpGet"))))))
                    .WithParameterList(
                        ParameterList(
                            SingletonSeparatedList<ParameterSyntax>(
                                Parameter(
                                    Identifier("value"))
                                .WithAttributeLists(
                                    SingletonList<AttributeListSyntax>(
                                        AttributeList(
                                            SingletonSeparatedList<AttributeSyntax>(
                                                Attribute(
                                                    IdentifierName("FromBody"))))))
                                .WithType(
                                    PredefinedType(
                                        Token(SyntaxKind.StringKeyword))))))
                    .WithBody(
                        Block(
                            SingletonList<StatementSyntax>(
                                TryStatement(
                                    SingletonList<CatchClauseSyntax>(
                                        CatchClause()
                                        .WithDeclaration(
                                            CatchDeclaration(
                                                IdentifierName("Exception"))
                                            .WithIdentifier(
                                                Identifier("e")))
                                        .WithBlock(
                                            Block(
                                                ExpressionStatement(
                                                    InvocationExpression(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            IdentifierName("_logger"),
                                                            IdentifierName("Error")))
                                                    .WithArgumentList(
                                                        ArgumentList(
                                                            SingletonSeparatedList<ArgumentSyntax>(
                                                                Argument(
                                                                    InterpolatedStringExpression(
                                                                        Token(SyntaxKind.InterpolatedStringStartToken))
                                                                    .WithContents(
                                                                        List<InterpolatedStringContentSyntax>(
                                                                            new InterpolatedStringContentSyntax[]{
                                                                                Interpolation(
                                                                                    MemberAccessExpression(
                                                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                                                        InvocationExpression(
                                                                                            MemberAccessExpression(
                                                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                                                IdentifierName("e"),
                                                                                                IdentifierName("GetType"))),
                                                                                        IdentifierName("Name"))),
                                                                                InterpolatedStringText()
                                                                                .WithTextToken(
                                                                                    Token(
                                                                                        TriviaList(),
                                                                                        SyntaxKind.InterpolatedStringTextToken,
                                                                                        ": ",
                                                                                        ": ",
                                                                                        TriviaList())),
                                                                                Interpolation(
                                                                                    MemberAccessExpression(
                                                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                                                        IdentifierName("e"),
                                                                                        IdentifierName("Message")))}))))))),
                                                ReturnStatement(
                                                    InvocationExpression(
                                                        IdentifierName("NotFound")))))))
                                .WithBlock(
                                    Block(
                                        ExpressionStatement(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName("_service"),
                                                    IdentifierName("DoSomething")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SingletonSeparatedList<ArgumentSyntax>(
                                                        Argument(
                                                            IdentifierName("value")))))),
                                        ReturnStatement(
                                            InvocationExpression(
                                                IdentifierName("Ok"))))))))}))))
